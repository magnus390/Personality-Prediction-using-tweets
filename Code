#importing libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem.porter import PorterStemmer

#Importing the dataset
dataset = pd.read_excel('twitter_set.xlsx')

#Cleaning the texts
import re
crps = []
for i in range(0,21043):
    review = re.sub('[^a-zA-Z]', ' ', dataset['Tweets'][i])
    review = review.lower()
    review = review.split()
    ps = PorterStemmer()
    review = [ps.stem(word) for word in review if word not in set(stopwords.words('english'))]
    review = ' '.join(review)
    crps.append(review)

#Creating bag of words
from sklearn.feature_extraction.text import CountVectorizer 
cv = CountVectorizer()
x = cv.fit_transform(crps).toarray()


#Label Encoder
from sklearn.preprocessing import LabelEncoder
labenc = LabelEncoder()

#Joy Emotion        
y = pd.DataFrame(dataset.iloc[:,1].values)
for i in range(0,21043):
    if(y[0][i]!="joy"):
        y[0][i] = "notjoy"

y[0] = labenc.fit_transform(y[0])

for i in range(0,21043):
    if(y[0][i]==0):
        y[0][i] = 1
    else:
        y[0][i] = 0

#Training and Testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 0)

#Running Algorithm
from sklearn.linear_model import LogisticRegression
classifier_joy = LogisticRegression(random_state = 0)
classifier_joy.fit(x_train,y_train)

# Predicting the Test set results
y_pred = classifier_joy.predict(x_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

print("Accuracy = {0}".format((cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])*100))

#Disgust Emotion   
dataset = pd.read_excel('twitter_set.xlsx')
y = pd.DataFrame(dataset.iloc[:,1].values)    
for i in range(0,21043):
    if(y[0][i]!="disgust"):
        y[0][i] = "notdisgust"

y[0] = labenc.fit_transform(y[0])

for i in range(0,21043):
    if(y[0][i]==0):
        y[0][i] = 1
    else:
        y[0][i] = 0

#Training and Testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 0)

#Running Algorithm
from sklearn.linear_model import LogisticRegression
classifier_disgust = LogisticRegression(random_state = 0)
classifier_disgust.fit(x_train,y_train)

# Predicting the Test set results
y_pred = classifier_disgust.predict(x_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

print("Accuracy = {0}".format((cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])*100))

#Sad Emotion        
dataset = pd.read_excel('twitter_set.xlsx')
y = pd.DataFrame(dataset.iloc[:,1].values)
for i in range(0,21043):
    if(y[0][i]!="sad"):
        y[0][i] = "notsad"

y[0] = labenc.fit_transform(y[0])

"""for i in range(0,21043):
    if(y[0][i]==0):
        y[0][i] = 1
    else:
        y[0][i] = 0
"""

#Training and Testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 0)

#Running Algorithm
from sklearn.linear_model import LogisticRegression
classifier_sad = LogisticRegression(random_state = 0)
classifier_sad.fit(x_train,y_train)

# Predicting the Test set results
y_pred = classifier_sad.predict(x_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

print("Accuracy = {0}".format((cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])*100))

#Fear Emotion        
dataset = pd.read_excel('twitter_set.xlsx')
y = pd.DataFrame(dataset.iloc[:,1].values)
for i in range(0,21043):
    if(y[0][i]!="fear"):
        y[0][i] = "notfear"

y[0] = labenc.fit_transform(y[0])

for i in range(0,21043):
    if(y[0][i]==0):
        y[0][i] = 1
    else:
        y[0][i] = 0

#Training and Testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 0)

#Running Algorithm
from sklearn.linear_model import LogisticRegression
classifier_fear = LogisticRegression(random_state = 0)
classifier_fear.fit(x_train,y_train)

# Predicting the Test set results
y_pred = classifier_fear.predict(x_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

print("Accuracy = {0}".format((cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])*100))

#Surprise Emotion        
dataset = pd.read_excel('twitter_set.xlsx')
y = pd.DataFrame(dataset.iloc[:,1].values)
for i in range(0,21043):
    if(y[0][i]!="surprise"):
        y[0][i] = "notsurprise"

y[0] = labenc.fit_transform(y[0])

"""for i in range(0,21043):
    if(y[0][i]==0):
        y[0][i] = 1
    else:
        y[0][i] = 0
"""

#Training and Testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 0)

#Running Algorithm
from sklearn.linear_model import LogisticRegression
classifier_surprise = LogisticRegression(random_state = 0)
classifier_surprise.fit(x_train,y_train)

# Predicting the Test set results
y_pred = classifier_surprise.predict(x_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

print("Accuracy = {0}".format((cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])*100))

#Anger Emotion        
dataset = pd.read_excel('twitter_set.xlsx')
y = pd.DataFrame(dataset.iloc[:,1].values)
for i in range(0,21043):
    if(y[0][i]!="anger"):
        y[0][i] = "notanger"

y[0] = labenc.fit_transform(y[0])

for i in range(0,21043):
    if(y[0][i]==0):
        y[0][i] = 1
    else:
        y[0][i] = 0

#Training and Testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 0)

#Running Algorithm
from sklearn.linear_model import LogisticRegression
classifier_anger = LogisticRegression(random_state = 0)
classifier_anger.fit(x_train,y_train)

# Predicting the Test set results
y_pred = classifier_anger.predict(x_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

print("Accuracy = {0}".format((cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])*100))


#Testing on the sentences

arr_sen = []
stri = "I am happy that results are out"
stri = stri.lower()
stri = stri.split()
ps = PorterStemmer()
stri = [ps.stem(word) for word in stri if word not in set(stopwords.words('english'))]
stri = ' '.join(stri)
arr_sen.append(stri)
bag_wor = cv.fit_transform(arr_sen).toarray()
   
y_pred = classifier_joy.predict(bag_wor)
y_pred
y_pred = classifier_disgust.predict(bag_wor)
y_pred
y_pred = classifier_sad.predict(bag_wor)
y_pred
y_pred = classifier_fear.predict(bag_wor)
y_pred
y_pred = classifier_surprise.predict(bag_wor)
y_pred
y_pred = classifier_anger.predict(bag_wor)
y_pred       
